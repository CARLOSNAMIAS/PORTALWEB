// Funci√≥n para actualizar la hora actual
function updateTime() {
    const now = new Date();
    const timeString = now.toLocaleTimeString('es-ES', {
        hour: '2-digit',
        minute: '2-digit',
        timeZone: 'America/Bogota'
    });
    document.getElementById('current-time').textContent = timeString;
}

// Funci√≥n para cambiar categor√≠as
function showCategory(category) {
    // Actualizar navegaci√≥n activa
    document.querySelectorAll('.nav-menu a').forEach(link => {
        link.classList.remove('active');
    });

    // Simular carga de contenido por categor√≠a
    showNotification(`Cargando noticias de ${category.toUpperCase()}...`, 'info');

    // En una implementaci√≥n real, aqu√≠ cargar√≠as contenido espec√≠fico
    setTimeout(() => {
        showNotification(`Noticias de ${category} actualizadas`, 'success');
    }, 1000);
}

// Funci√≥n para abrir art√≠culos
function openArticle(title) {
    showNotification('Abriendo art√≠culo...', 'info');

    setTimeout(() => {
        alert(`üì∞ ${title}\n\nEn una implementaci√≥n real, esto abrir√≠a el art√≠culo completo con:\n‚Ä¢ Contenido completo del art√≠culo\n‚Ä¢ Galer√≠a de im√°genes\n‚Ä¢ Videos relacionados\n‚Ä¢ Comentarios de lectores\n‚Ä¢ Art√≠culos relacionados\n‚Ä¢ Opciones para compartir`);
    }, 500);
}

// Funci√≥n para reproducir videos
function playVideo(title) {
    showNotification('Cargando reproductor de video...', 'info');

    setTimeout(() => {
        alert(`üé• ${title}\n\nEn una implementaci√≥n real, esto abrir√≠a:\n‚Ä¢ Reproductor de video integrado\n‚Ä¢ Controles de reproducci√≥n\n‚Ä¢ Subt√≠tulos disponibles\n‚Ä¢ Videos relacionados\n‚Ä¢ Opciones de calidad\n‚Ä¢ Modo pantalla completa`);
    }, 500);
}

// Funci√≥n para suscripci√≥n al bolet√≠n
function subscribeNewsletter() {
    const emailInput = event.target.previousElementSibling;
    const email = emailInput.value.trim();

    if (!email) {
        showNotification('Por favor ingresa tu email', 'error');
        return;
    }

    if (!email.includes('@') || !email.includes('.')) {
        showNotification('Por favor ingresa un email v√°lido', 'error');
        return;
    }

    // Simular suscripci√≥n
    event.target.textContent = 'SUSCRIBIENDO...';
    event.target.disabled = true;

    setTimeout(() => {
        showNotification(`¬°Suscripci√≥n exitosa! Recibir√°s noticias en ${email}`, 'success');
        emailInput.value = '';
        event.target.textContent = 'SUSCRIBIRSE';
        event.target.disabled = false;
    }, 2000);
}

// Funci√≥n de b√∫squeda mejorada
function setupAdvancedSearch() {
    const searchBox = document.querySelector('.search-box');
    let searchTimeout;

    searchBox.addEventListener('input', function () {
        clearTimeout(searchTimeout);
        const query = this.value.trim();

        if (query.length > 2) {
            searchTimeout = setTimeout(() => {
                showSearchSuggestions(query);
            }, 300);
        }
    });

    searchBox.addEventListener('keypress', function (e) {
        if (e.key === 'Enter') {
            const query = this.value.trim();
            if (query) {
                performSearch(query);
            }
        }
    });
}

// Funci√≥n para mostrar sugerencias de b√∫squeda
function showSearchSuggestions(query) {
    // En una implementaci√≥n real, esto har√≠a una llamada a la API
    console.log(`Buscando sugerencias para: ${query}`);
}

// Funci√≥n para realizar b√∫squeda
function performSearch(query) {
    showNotification(`Buscando: "${query}"...`, 'info');

    // Simular b√∫squeda
    setTimeout(() => {
        alert(`üîç Resultados de b√∫squeda para: "${query}"\n\nEn una implementaci√≥n real mostrar√≠a:\n‚Ä¢ Art√≠culos relacionados\n‚Ä¢ Videos\n‚Ä¢ Im√°genes\n‚Ä¢ Filtros por fecha y categor√≠a\n‚Ä¢ Ordenamiento por relevancia`);
        document.querySelector('.search-box').value = '';
    }, 1000);
}

// Sistema de notificaciones mejorado
function showNotification(message, type = 'info') {
    // Remover notificaci√≥n existente si hay una
    const existingNotification = document.querySelector('.notification');
    if (existingNotification) {
        existingNotification.remove();
    }

    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;

    const colors = {
        success: '#27ae60',
        error: '#e74c3c',
        info: '#3498db',
        warning: '#f39c12'
    };

    notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: ${colors[type]};
                color: white;
                padding: 1rem 2rem;
                border-radius: 8px;
                box-shadow: 0 10px 30px rgba(0,0,0,0.3);
                z-index: 10000;
                font-weight: 600;
                font-size: 0.9rem;
                transform: translateX(100%);
                transition: transform 0.3s ease-out;
                max-width: 400px;
            `;

    notification.textContent = message;
    document.body.appendChild(notification);

    // Animar entrada
    setTimeout(() => {
        notification.style.transform = 'translateX(0)';
    }, 10);

    // Remover despu√©s de 4 segundos
    setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (document.body.contains(notification)) {
                document.body.removeChild(notification);
            }
        }, 300);
    }, 4000);
}

// Funci√≥n para scroll suave mejorado
function setupSmoothScrolling() {
    // Detectar scroll para efectos
    let ticking = false;

    function updateOnScroll() {
        const scrolled = window.pageYOffset;
        const nav = document.querySelector('.nav');

        if (scrolled > 100) {
            nav.style.boxShadow = '0 2px 20px rgba(0,0,0,0.1)';
        } else {
            nav.style.boxShadow = 'none';
        }

        ticking = false;
    }

    window.addEventListener('scroll', () => {
        if (!ticking) {
            requestAnimationFrame(updateOnScroll);
            ticking = true;
        }
    });
}

// Funci√≥n para lazy loading de contenido
function setupContentLazyLoading() {
    const observerOptions = {
        root: null,
        rootMargin: '50px',
        threshold: 0.1
    };

    const contentObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('fade-in');
                contentObserver.unobserve(entry.target);
            }
        });
    }, observerOptions);

    // Observar elementos que necesitan lazy loading
    document.querySelectorAll('.story-card, .video-card').forEach(card => {
        contentObserver.observe(card);
    });
}

// Funci√≥n para simular actualizaciones en tiempo real
function startLiveUpdates() {
    const liveContainer = document.querySelector('.live-updates');
    const updates = [
        'Presidente anuncia nueva inversi√≥n en infraestructura',
        'Bolsa de valores cierra con tendencia positiva',
        'Meteorolog√≠a emite alerta por lluvias intensas',
        'Ministro de Salud presenta nuevo protocolo sanitario',
        'Universidad Nacional inaugura centro de investigaci√≥n'
    ];

    let updateIndex = 0;

    setInterval(() => {
        if (liveContainer && updates[updateIndex]) {
            const now = new Date();
            const timeString = now.toLocaleTimeString('es-ES', {
                hour: '2-digit',
                minute: '2-digit'
            });

            const newUpdate = document.createElement('div');
            newUpdate.className = 'live-item';
            newUpdate.innerHTML = `
                        <div class="live-time">${timeString}</div>
                        <div class="live-text">${updates[updateIndex]}</div>
                    `;

            const firstUpdate = liveContainer.querySelector('.live-item');
            if (firstUpdate) {
                liveContainer.insertBefore(newUpdate, firstUpdate);
            }

            // Mantener solo las √∫ltimas 4 actualizaciones
            const allUpdates = liveContainer.querySelectorAll('.live-item');
            if (allUpdates.length > 4) {
                allUpdates[allUpdates.length - 1].remove();
            }

            updateIndex = (updateIndex + 1) % updates.length;
        }
    }, 120000); // Cada 2 minutos
}

// --- FUNCIONES DE RENDERIZADO DIN√ÅMICO ---

function renderHeroStory(story) {
    const heroSection = document.querySelector('.hero-section');
    heroSection.innerHTML = `
        <article class="hero-story" onclick="openArticle('${story.title}')">
            <div class="hero-image">
                <div class="hero-overlay">
                    <span class="hero-category">${story.category}</span>
                    <h1 class="hero-title">${story.title}</h1>
                    <p class="hero-summary">${story.summary}</p>
                    <div class="hero-meta">
                        <span>üìù Por ${story.author}</span>
                        <span>üïê ${story.time}</span>
                        <span>üìç ${story.location}</span>
                        <span>üí¨ ${story.comments} comentarios</span>
                    </div>
                </div>
            </div>
        </article>
    `;
}

function renderTopStories(stories) {
    const storiesGrid = document.querySelector('.stories-grid');
    let storiesHtml = stories.map(story => {
        const imageHtml = story.image.startsWith('img/')
            ? `<img src="${story.image}" alt="${story.alt}" style="width: 100%; height: 100%; object-fit: cover;">`
            : story.image;
        return `
        <article class="story-card" onclick="openArticle('${story.title}')">
            <div class="story-image">
                ${imageHtml}
            </div>
            <div class="story-content">
                <span class="story-category">${story.category}</span>
                <h3 class="story-title">${story.title}</h3>
                <p class="story-summary">${story.summary}</p>
                <div class="story-meta">
                    <span class="story-time">üïê ${story.time}</span>
                    <span>üëÅÔ∏è ${story.reads}</span>
                </div>
            </div>
        </article>
    `});

    // Inyectar anuncio despu√©s de la segunda noticia
    if (storiesHtml.length > 2) {
        const adHtml = `
            <article class="story-card">
                <div class="ad-placeholder ad-in-feed">
                    <span>Publicidad</span>
                </div>
            </article>
        `;
        storiesHtml.splice(2, 0, adHtml);
    }

    storiesGrid.innerHTML = storiesHtml.join('');
}

function renderTrendingStories(stories) {
    const trendingList = document.querySelector('.trending-list');
    trendingList.innerHTML = stories.map(story => `
        <li class="trending-item" onclick="openArticle('${story.title}')">
            <span class="trending-rank">${story.rank}</span>
            <div class="trending-content">
                <h4>${story.title}</h4>
                <div class="trending-meta">${story.meta}</div>
            </div>
        </li>
    `).join('');
}

function renderLiveUpdates(updates) {
    const liveUpdatesContainer = document.querySelector('.live-updates');
    const widgetHeader = liveUpdatesContainer.querySelector('.widget-header');
    liveUpdatesContainer.innerHTML = ''; // Limpiar contenedor
    liveUpdatesContainer.appendChild(widgetHeader); // Re-agregar el encabezado

    updates.forEach(update => {
        const item = document.createElement('div');
        item.className = 'live-item';
        item.innerHTML = `
            <div class="live-time">${update.time}</div>
            <div class="live-text">${update.text}</div>
        `;
        liveUpdatesContainer.appendChild(item);
    });
}

function renderVideos(videos) {
    const videoGrid = document.querySelector('.video-grid');
    videoGrid.innerHTML = videos.map(video => `
        <article class="video-card" onclick="playVideo('${video.title}')">
            <div class="video-thumbnail">
                <div class="play-button">‚ñ∂</div>
                ${video.thumbnail}
            </div>
            <div class="video-info">
                <h3 class="video-title">${video.title}</h3>
                <div class="video-duration">‚è±Ô∏è ${video.duration}</div>
            </div>
        </article>
    `).join('');
}


// --- FUNCIONES DE PICO Y PLACA ---

function setupPicoYPlaca() {
    const citySelector = document.getElementById('pico-y-placa-city-selector');
    const infoContainer = document.getElementById('pico-y-placa-info');

    if (!citySelector || !infoContainer || typeof picoYPlacaData === 'undefined') {
        console.error("Elementos del DOM de Pico y Placa o los datos no se encontraron.");
        return;
    }

    const cities = Object.keys(picoYPlacaData);

    // 1. Populate city selector
    cities.forEach(city => {
        const option = document.createElement('option');
        option.value = city;
        option.textContent = city;
        citySelector.appendChild(option);
    });

    // 2. Function to update info
    const updatePicoYPlacaInfo = (city) => {
        const data = picoYPlacaData[city];
        if (!data) {
            infoContainer.innerHTML = '<p>No hay datos para la ciudad seleccionada.</p>';
            return;
        }

        const today = new Date();
        const dayOfWeek = today.getDay(); // Sunday = 0, Monday = 1, etc.
        const dayOfMonth = today.getDate();

        const restriccion = data.getRestriccion(dayOfWeek, dayOfMonth);

        infoContainer.innerHTML = `
            <h5>Hoy en ${city}</h5>
            <p><strong>Restricci√≥n:</strong> ${restriccion}</p>
            <p><small><strong>Horario:</strong> ${data.horario}</small></p>
        `;
    };

    // 3. Add event listener
    citySelector.addEventListener('change', (e) => {
        updatePicoYPlacaInfo(e.target.value);
    });

    // 4. Initial update
    if (cities.length > 0) {
        updatePicoYPlacaInfo(cities[0]);
    }
}


// --- FUNCIONES DE CLIMA ---

function getWeatherIcon(wmoCode) {
    const icons = {
        0: '‚òÄÔ∏è', // Clear sky
        1: 'üå§Ô∏è', // Mainly clear
        2: '‚õÖ', // Partly cloudy
        3: '‚òÅÔ∏è', // Overcast
        45: 'üå´Ô∏è', // Fog
        48: 'üå´Ô∏è', // Depositing rime fog
        51: 'üå¶Ô∏è', // Drizzle: Light
        53: 'üå¶Ô∏è', // Drizzle: Moderate
        55: 'üå¶Ô∏è', // Drizzle: Dense intensity
        61: 'üåßÔ∏è', // Rain: Slight
        63: 'üåßÔ∏è', // Rain: Moderate
        65: 'üåßÔ∏è', // Rain: Heavy intensity
        66: 'üåßÔ∏è', // Freezing Rain: Light
        67: 'üåßÔ∏è', // Freezing Rain: Heavy intensity
        71: 'üå®Ô∏è', // Snow fall: Slight
        73: 'üå®Ô∏è', // Snow fall: Moderate
        75: 'üå®Ô∏è', // Snow fall: Heavy intensity
        77: 'üå®Ô∏è', // Snow grains
        80: '‚õàÔ∏è', // Rain showers: Slight
        81: '‚õàÔ∏è', // Rain showers: Moderate
        82: '‚õàÔ∏è', // Rain showers: Violent
        85: 'üå®Ô∏è', // Snow showers slight
        86: 'üå®Ô∏è', // Snow showers heavy
        95: 'üå©Ô∏è', // Thunderbolt
        96: 'üå©Ô∏è', // Thunderstorm with slight hail
        99: 'üå©Ô∏è', // Thunderstorm with heavy hail
    };
    return icons[wmoCode] || 'ü§∑';
}

function fetchUserWeather() {
    if ('geolocation' in navigator) {
        navigator.geolocation.getCurrentPosition(async (position) => {
            const { latitude, longitude } = position.coords;

            try {
                const [weatherResponse, geoResponse] = await Promise.all([
                    fetch(`https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current_weather=true`),
                    fetch(`https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${latitude}&longitude=${longitude}&localityLanguage=es`)
                ]);

                if (!weatherResponse.ok || !geoResponse.ok) {
                    throw new Error('Failed to fetch data');
                }

                const weatherData = await weatherResponse.json();
                const geoData = await geoResponse.json();

                const locationElement = document.getElementById('location');
                const weatherElement = document.getElementById('weather');

                const city = geoData.city || geoData.locality || 'Ubicaci√≥n desconocida';
                const country = geoData.countryName || '';
                const temperature = Math.round(weatherData.current_weather.temperature);
                const weatherCode = weatherData.current_weather.weathercode;
                const icon = getWeatherIcon(weatherCode);

                if (locationElement) locationElement.textContent = `üìç ${city}, ${country}`;
                if (weatherElement) weatherElement.textContent = `${icon} ${temperature}¬∞C`;

                // Auto-select Pico y Placa city
                if (city && typeof picoYPlacaData !== 'undefined' && picoYPlacaData[city]) {
                    const citySelector = document.getElementById('pico-y-placa-city-selector');
                    if (citySelector) {
                        citySelector.value = city;
                        citySelector.dispatchEvent(new Event('change'));
                    }
                }

            } catch (error) {
                console.error("Error fetching weather or location data:", error);
            }
        }, (error) => {
            console.error("Error getting geolocation:", error.message);
        });
    } else {
        console.log("Geolocation is not supported by this browser.");
    }
}


function setupHamburgerMenu() {
    const hamburgerButton = document.getElementById('hamburger-button');
    const navMenu = document.getElementById('nav-menu');

    if (hamburgerButton && navMenu) {
        hamburgerButton.addEventListener('click', () => {
            navMenu.classList.toggle('nav-menu--open');
        });
    }
}

// Inicializaci√≥n completa
document.addEventListener('DOMContentLoaded', function () {
    console.log('üî¥ CNN Portal cargado correctamente');

    // Renderizar contenido din√°mico desde la API
    fetch('/api/get-news')
        .then(response => {
            if (!response.ok) {
                throw new Error(`Error HTTP: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            renderHeroStory(data.heroStory);
            renderTopStories(data.topStories);
        })
        .catch(error => {
            console.error("Error al cargar noticias desde la API:", error);
            showNotification('No se pudieron cargar las noticias.', 'error');
            // Opcional: como respaldo, cargar datos est√°ticos de database.js
            renderHeroStory(heroStory);
            renderTopStories(topStories);
        });

    // El resto del contenido se sigue renderizando de forma est√°tica por ahora
    renderTrendingStories(trendingStories);
    renderLiveUpdates(liveUpdates);
    renderVideos(featuredVideos);

    // Configurar todas las funcionalidades
    updateTime();
    setupPicoYPlaca(); // Configurar Pico y Placa
    fetchUserWeather(); // Obtener clima del usuario (y auto-seleccionar ciudad de PyP)
    setupAdvancedSearch();
    setupSmoothScrolling();
    setupContentLazyLoading();
    startLiveUpdates();
    setupHamburgerMenu(); // <-- A√ëADIDO

    // Actualizar hora cada minuto
    setInterval(updateTime, 60000);

    // Mostrar bienvenida
    setTimeout(() => {
        showNotification('üî¥ Conectado a DNA en vivo - Noticias actualiz√°ndose autom√°ticamente', 'success');
    }, 1500);

    // Agregar efectos de fade-in
    setTimeout(() => {
        document.querySelectorAll('.story-card, .sidebar-widget').forEach((el, index) => {
            setTimeout(() => {
                el.style.opacity = '0';
                el.style.transform = 'translateY(20px)';
                el.style.transition = 'all 0.6s ease-out';

                setTimeout(() => {
                    el.style.opacity = '1';
                    el.style.transform = 'translateY(0)';
                }, 100);
            }, index * 100);
        });
    }, 500);
});

// Agregar estilos adicionales para animaciones
const additionalStyles = document.createElement('style');
additionalStyles.textContent = `
            .fade-in {
                animation: fadeInUp 0.6s ease-out;
            }
            
            @keyframes fadeInUp {
                from {
                    opacity: 0;
                    transform: translateY(30px);
                }
                to {
                    opacity: 1;
                    transform: translateY(0);
                }
            }
            
            /* Hover effects mejorados */
            .story-card:hover .story-title {
                color: #cc0000;
            }
            
            .trending-item:hover .trending-rank {
                background: #990000;
                transform: scale(1.1);
            }
            
            .hero-story:hover {
                transform: scale(1.02);
                transition: transform 0.3s ease-out;
            }
            
            /* Loading states */
            .loading-skeleton {
                background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
                background-size: 200% 100%;
                animation: shimmer 1.5s infinite;
            }
            
            @keyframes shimmer {
                0% { background-position: 200% 0; }
                100% { background-position: -200% 0; }
            }
        `;
document.head.appendChild(additionalStyles);